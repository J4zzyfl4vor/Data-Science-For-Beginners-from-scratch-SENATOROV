"""Выбор понятных имен."""

# 1.  **Имена – идентификаторы**
# 2.  **Метасинтаксические переменные** обычно используются в учебниках или фрагментах кода, когда необходимо обобщенное имя переменной. Например: для функций `foo`/`bar`
# 3.  **Регистры, используемые для названий переменных:**
#     - **Змеиный регистр** (`snake_case`) разделяет слова символом подчеркивания, который напоминает ползущую между словами змею. В этом случае все буквы записываются в нижнем регистре, а константы часто записываются в верхнем змеином регистре (`UPPER_SNAKE_CASE`)
#     - **Верблюжий регистр** (`camelCase`) — слова записываются в нижнем регистре, но второе и следующие слова начинаются с заглавной. Эта схема в большинстве случаев подразумевает, что первое слово начинается с буквы нижнего регистра. Буквы верхнего регистра напоминают верблюжьи горбы.
#     - **Схема Pascal** (`PascalCase`) — названа так, потому что применяется в языке программирования Pascal; аналогична схеме верблюжьего регистра, но первое слово в ней тоже начинается с заглавной.
# 4. Выбор регистра относится к области форматирования кода
# 5. ***Правила формирования имен по PEP8:***
#     - Все буквы должны быть буквами ASCII — то есть латинскими буквами
#     верхнего и нижнего регистров без диакритических знаков.
#     - Имена модулей должны быть короткими и состоять только из букв нижнего
#     регистра.
#     - Имена классов необходимо записывать в схеме Pascal.
#     - Имена констант следует записывать в верхнем змеином регистре.
#     - Имена функций, методов и переменных записывают в нижнем змеином
#     регистре.
#     - Первый аргумент методов всегда должен называться `self` в нижнем регистре.
#     - Первый аргумент методов классов всегда должен называться `cls` в нижнем
#     регистре.
#     - Приватные атрибуты классов всегда начинают с символа подчеркивания `( _ )`.
#     - Публичные атрибуты классов **НИКОГДА НЕ** начинают с символа подчеркивания `( _ )`.
# 6. ***Самая распространенная ошибка при выборе имен — суперкороткие имена:***
#     - **Одно- или двухбуквенное имя** (например, `g`), вероятно, обозначает какое-то 
#     слово, начинающееся с этой буквы, но таких слов очень много. Сокращения
#     и одно-двухбуквенные имена легко записать, но они плохо читаются. Это
#     замечание относится и к следующему пункту.
#     - **Сокращенные имена вида** `mon` — могут означать monitor, month, monster
#     и множество других слов.
#     - **Имя из одного слова** — например, `start` (начало) — может трактоваться по-разному: начало чего? При отсутствии уточнения другие люди вас вряд ли поймут.
# 7. ***Последовательные числовые суффиксы в именах*** - Последовательные числовые суффиксы в именах указывают на то, что вам, воз-
# можно, стоит изменить тип данных переменной или включить дополнительную информацию в имя.
# Например:
#     - Имена переменных вида `payment1`, `payment2` и `payment3` не сообщают читателю кода, чем они различаются.
#     - Функции вида `makePayment1(amount)`, `makePayment2(amount)` и т. д., вероятно, стоит преобразовать в одну функцию, которая получает целочисленный аргумент: `makePayment(1, amount)`, `makePayment(2, amount)` и т. д. Если эти функции обладают разным поведением, оправдывающим определение отдельных функций, смысл чисел должен быть отражен в имени, например: `makeLowPriorityPayment(amount)` и `makeHighPriorityPayment(amount)` или `make1stQuarterPayment(amount)` и `make2ndQuarterPayment(amount)`
# 8. **Выбирайте имена, пригодные для поиска**
# 9. **Избегайте шуток, каламбуров и культурных отсылок**
# 10. **Не заменяйте встроенные имена:** Никогда не используйте встроенные имена Python для своих переменных. Например, присвоив переменной имя list или set, вы заместите функции Python `list()` и `set()`, что позднее может привести к появлению ошибок. Функция `list()` создает объекты списков, но ее замена может вызвать ошибку
# ***ВЫВОД:***
# Выбор имен не имеет никакого отношения к алгоритмам или компьютерной теории, и все же это важнейший фактор написания удобочитаемого кода. В конечном счете выбор имен, используемых в вашем коде, остается на ваше усмотрение, но вы должны учитывать существующие рекомендации.
# Имя должно быть лаконичным, но информативным. Оно должно легко находиться функцией поиска Ctrl-F. То, насколько просто можно найти выбранное имя, свидетельствует о его уникальности.
# Избегайте имен, уже используемых стандартной библиотекой Python, — таких как `all`, `any`, `date`, `email`, `file`, `format`, `hash`, `id`, `input`, `list`, `min`, `max`, `object`, `open`, `random`, `set`, `str`, `sum`, `test` и `type`. Их применение может создать трудноуловимые ошибки в вашем коде.
#
#
#
#

#
