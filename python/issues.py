# %%
"""Issues Task."""

# + [markdown] magic_args="[markdown]"
# Общие вопросы
# 1) Что такое Issues на GitHub и для чего они используются?
# Issues — это способ оставить задачу/баг/запрос в репозитории
# и вести обсуждение по нему, чтобы другие могли видеть,
# комментировать и работать над проблемой
# 2) Чем Issues отличаются от других инструментов управления задачами?
# 1) Интеграция с репозиторием: Issues привязаны прямо к коду
# и коммитам в репозитории, а не отдельной внешней системе
# 2) Лёгкость создания и обсуждения: быстро создаются
# из выделения кода (пермалинк) и позволяют вести
# комментирование и review-процесс
# 3) Какие основные компоненты (поля) есть у каждого Issue?
# Создание Issues
# Title (заголовок) — краткое информативное описание проблемы
# (рекомендуется на английском)
# Description (описание) — подробности, трассировки, шаги воспроизведения
# файлы/командные выводы
# Labels (метки) — категоризация (bug, enhancement и т.д.)
# Assignees (ответственные) — кто работает над задачей
# Milestone — веха/дедлайн, к которой привязан Issue
# Comments (комментарии) — обсуждение и апдейты
# Status (open/closed) — открыто или закрыто после решения
# 4) Как создать новое Issue в репозитории?
# Выделите интересующую строчку/диапазон кода в файле
# (используя клик + Shift для многократного выделения)
# Нажмите три точки → “Create permalink” → Issues → New issue.
# Заполните Title и Description, затем нажмите создать
# 5) Какие данные рекомендуется указывать в описании Issue для
# лучшего понимания задачи?
# Чёткий контекст (файл/строки — можно вставить permalink).
# Описание ошибки и шаги воспроизведения.
# Трассировки/логи/скриншоты.
# Ожидаемое и фактическое поведение.
# Среда исполнения/версия и любые временные метки.
# Пример релевантного коммита или кода (копировать title/перmalink)
# 6) Какие теги (labels) можно добавить к Issue? Какие из них стандартные?
# Можно добавлять любые Labels: bug, enhancement, documentation,
# question, help wanted и т.д.
# Стандартные (часто используемые) — bug, enhancement, documentation;
# набор варьируется по репозиторию
# 7) Как прикрепить Assignees (ответственных) к Issue?
# При создании или при просмотре Issue в правой панели выбрать
# Assignees и поставить пользователя(ов) как ответственных
# Работа с Issues
# 8) Как использовать Labels для классификации задач?
# Добавляйте соответствующие метки (bug/feature/priority)
# для фильтрации и визуальной классификации.
# Используйте цвета и стандартизированные имена,
# чтобы быстро понимать тип и приоритет задачи
# 9) Для чего нужен Milestone, и как связать его с Issue?
# Milestone — это веха или дедлайн (месяц/релиз),
# группирующая задачи, чтобы отслеживать прогресс.
# При создании/редактировании Issue в правой панели
# выбираете Milestone и присваиваете нужную веху
# 10) Как привязать Issue к пул-реквесту (Pull Request)?
# В тексте коммита или PR используйте специальную форму закрытия,
# либо в описании PR укажите “closes #номер” или добавьте ссылку на Issue.
# Также можно в коммите включить в название или описание ссылку на Issue
# 11) Как добавить комментарий к существующему Issue?
# Открываете Issue, внизу есть поле для комментария — пишете и отправляете.
# Комментарии фиксируют этапы работы и позволяют уведомлять
# автора/команду (через упоминания)
# Закрытие и завершение Issues
# 12) Как закрыть Issue вручную?
# Откройте Issue и нажмите кнопку “Close issue”. Или в PR/коммите пометить
# как выполненное и затем вручную закрыть
# 13) Можно ли автоматически закрыть Issue с помощью сообщения в коммите
# или пул-реквесте? Как это сделать?
# Да. В сообщении коммита или в описании PR используйте ключевые
# слова и номер Issue, например “closes #10” или “fixes #10” — после слияния
# PR соответствующее Issue будет автоматически закрыто
# 14) Как повторно открыть закрытое Issue, если работа ещё не завершена?
# Откройте закрытое Issue и нажмите “Reopen issue” — статус снова станет Open
# Фильтрация и поиск
# 15) Как найти все открытые или закрытые Issues в репозитории?
# На странице Issues используйте вкладки Open и Closed
# для просмотра соответствующих задач
# 16) Как использовать фильтры для поиска Issues по меткам,
# исполнителям или другим критериям?
# В поле поиска Issues вводите фильтры, например label:bug,
# assignee:username, is:open.
# Также можно комбинировать фильтры для точного поиска
# (через интерфейс или поисковую строку)
# 17) Как сортировать Issues по приоритету, дате создания или
# другим параметрам?
# На странице Issues есть опции сортировки
# (по recently updated, oldest, most commented и т.д.).
# Для приоритета используйте метки или собственные правила
# сортировки внутри команды (GitHub не хранит "приоритет" как
# отдельное встроенное поле — используют Labels)
# Интеграции и автоматизация
# 18) Как настроить автоматические уведомления о новых или изменённых Issues?
# Подпишитесь на репозиторий (Watch) или на конкретное Issue.
# Настройте уведомления в профиле/репозитории,
# а также используйте Webhooks для внешних систем напр. Телеграмм
# 19) Что такое Projects в контексте GitHub, и как связать их с Issues?
# Projects — канбан-доски/планы внутри GitHub для организации
# Issues/PR по колонкам.
# Можно добавлять Issue в Project, чтобы отслеживать статус
# в рамках рабочей доски (связь через интерфейс Projects), но Projects
# обычно интегрируются с Issues напрямую
# 20) Какие сторонние инструменты можно использовать для автоматизации
# работы с Issues (например, боты, Webhooks)?
# Webhooks для отправки событий в внешние системы (чат, CI).
# Боты и интеграции (например, CI/CD, чат-боты) для автоматических пометок
# уведомлений и триггеров. Так же уведомления и коммуникацию через
# Telegram как пример интеграции команды
# Коллаборация
# 21) Как упомянуть другого пользователя в комментарии к Issue?
# @username в комментарии — пользователь получит уведомление
# 22) Как запросить дополнительные данные или уточнения у автора Issue?
# Оставьте комментарий с конкретным списком нужных данных
# (логи, шаги, окружение) и при необходимости пометьте автора
# через @. Можно изменить Description или попросить прислать permalink на код
# 23) Что делать, если Issue неактуально или его нужно объединить с другим?
# Добавить комментарий с объяснением и закрыть Issue
# (или отметить как duplicate).
# Указать ссылку на основной Issue и при необходимости
# перенести информацию туда
# Практические аспекты
# 24) Как использовать шаблоны для создания Issues?
# В репозитории можно добавить шаблоны Issues (ISSUE_TEMPLATE)
# — тогда при создании Issue пользователь будет заполнять
# предзаполненные поля/чеклисты
# 25) Что такое Linked Issues, и как создать связь между задачами?
# Linked Issues — связи типа “blocks”, “is blocked by”, “relates to”
# между задачами или между Issue и PR.
# Связи создаются в интерфейсе Issue/PR
# (через поле “Linked issues” или упоминая в тексте)
# 26) Какие метрики (например, время выполнения) можно отслеживать с
# помощью Issues?
# Вручную/через инструменты: время от открытия до закрытия,
# количество комментариев, количество связанных PR, закрытые
# в рамках Milestone.
# Можно экспортировать данные или использовать сторонние
# аналитические инструменты для метрик по Issues
# 27) Какие best practices рекомендуются при работе с Issues в команде?
# Информативные заголовки (ключевые слова, трассировки)
# — помогает поиску и привязке коммитов
# Заполнять описание подробно (шаги, логи, окружение).
# Использовать Labels и Milestones для классификации и дедлайнов
# Привязывать коммиты/PR к Issue с помощью “closes #” для прозрачности
#  и автоматического закрытия
# Оповещать автора после закрытия (через комментарий или CL/лог)
# чтобы он видел, что задача решена
# Использовать шаблоны для стандартизации информации в Issue
