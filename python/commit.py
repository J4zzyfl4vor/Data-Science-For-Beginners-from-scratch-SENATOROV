# %%
"""Issue commits."""

# 1) Опишите своими словами назначение каждого из этих типов коммитов:
# feat, fix, docs, style, refactor, test, build, ci, perf, chore.
# feat — добавление новой функциональности,
# которая приносит пользу пользователю.
# Например, новая кнопка, API-метод или возможность.
# fix — исправление ошибки в коде,
# которая влияла на работу программы.
# Устранение багов, некорректного поведения.
# docs — изменения в документации: README,
# комментарии в коде, руководства пользователя, API-документация.
# style — изменения форматирования кода без влияния на логику:
# отступы, пробелы, точки с запятой, порядок импортов.
# refactor — переработка кода для улучшения его структуры
# без изменения функциональности. Оптимизация, упрощение.
# test — добавление или изменение тестов: unit-тесты,
# интеграционные тесты, исправление существующих тестов.
# build — изменения в системе сборки проекта: настройки webpack,
# package.json, Dockerfile, скрипты сборки.
# ci — изменения в настройках непрерывной интеграции:
# GitHub Actions, Travis CI, Jenkins, pipeline конфигурации.
# perf — улучшения производительности кода без
# изменения внешней функциональности.
# chore — рутинные задачи, не связанные с кодом:
# обновление зависимостей, настройка инструментов разработки
#
# 2) Представьте, что вы исправили баг в функции, которая
# некорректно округляет числа. Сделайте фиктивный коммит
# и напишите для него сообщение в соответствии
# с Conventional Commits (используя тип fix).
# git commit -m "fix: correct number rounding in calculation function
#
# 3) Добавление новой функциональности:
# Допустим, вы реализовали новую функцию generateReport в проекте.
# Сделайте фиктивный коммит с типом feat,
# отражающий добавление этой функциональности
# git commit -m "feat: add generateReport function for data export
#
# 4) Модификация формата кода или стилей:
# Представьте, что вы поправили отступы и форматирование во всём проекте,
# не меняя логики кода. Сделайте фиктивный коммит с типом style
# git commit -m "style: standardize code formatting across project
# 5) Документация и тестирование:
# Сделайте фиктивный коммит с типом docs,
# добавляющий или улучшающий документацию для вашей новой функции.
# git commit -m "docs: add comprehensive documentation
# for generateReport function
#
# Сделайте фиктивный коммит с типом test, добавляющий тесты для этой же функции
# git commit -m "test: add comprehensive test suite for generateReport function
