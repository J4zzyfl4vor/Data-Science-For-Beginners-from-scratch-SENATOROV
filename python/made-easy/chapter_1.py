"""Practice Chapter 1.5."""

# 1. Какие предметные области входят в Data Science? Что между ними общего и
# в чем различие?
#     - Машинное обучение
#     - Статистический анализ
#     - Визуализация данных
#     - Обработка естественного языка
#     - Big Data
# Различие: методы и цели (прогнозирование vs анализ vs визуализация)
# 2. Как вы понимаете термин «алгоритм»? Как алгоритмы связаны с блок-схемами?:
#     **Алгоритм:**
#     - Четкая последовательность шагов для решения задачи
# Блок-схемы — графическое представление алгоритмов
# 3. Какую программу можно назвать хорошей? Запишите все характеристики, какие
# удастся придумать.
#     - Работоспособность
#     - Читаемость кода
#     - Производительность
#     - Масштабируемость
#     - Безопасность
#     - Поддерживаемость
#     - Эффективность
#     - Надежность
# 4. Какой язык понимает компьютер?
# Бинарный код (машинные инструкции - 0 и 1)
# 5. Чем языки программирования отличаются от языков, на которых мы говорим?
# Компьютер понимает только то, что написано точно по правилам, а человек может догадаться о смысле даже при ошибках

# ***Правда или ложь***
# 1. Машинное обучение - это инструмент для извлечения знаний из данных.
# Правда
# 2. Глубокое обучение - это то же самое, что машинное обучение.
# Ложь (Глубокое обучение — это подраздел машинного обучения)
# 3. Все инженеры-программисты также могут считаться специалистами по данным.
# Ложь
# 4. Статистика - важный инструмент для специалистов по данным.
# Правда
# 5. Компьютер может принимать решения, выходящие за рамки данных ему инструкций,
# подстраиваясь под изменения среды.
# Ложь
# 6. Компьютеры понимают языки программирования «как есть».
# Ложь (Компьютеры понимают только машинный код)
# 7. Некоторые языки программирования компилируются, некоторые интерпретируются,
# а некоторые используют и то и другое.
# Правда
# 8. Все программы выполняются последовательно.
# Ложь (Есть многопоточные и параллельные программы)
# 9. В ЮЕ есть встроенный текстовый редактор.
# Правда
# 1О. Компиляторы и интерпретаторы - это такие механизмы, наподобие привода
# для компакт-дисков.
# Это компьютерные программы

# 1. Напишите алгоритм для расчета простых процентов от некоторой суммы.
# Ввести: основная сумма, процентная ставка, время в годах
# Процент = основная сумма * (процентная ставка / 100) * время
# Вывести Процент
# 2. Напишите алгоритм для вычисления площади прямоугольника.
# Ввести: длина, ширина
# Площадь = длина * ширина
# Вывести Площадь
# 3. Напишите алгоритм вычисления периметра круга.
# Ввести: радиус
# Периметр = 2 * Пи * радиус
# Вывести Периметр
# 4. Напишите алгоритм, который находит все простые числа меньше 100.
# Для каждого числа от 2 до 99:
#     считать число простым
#     Для каждого делителя от 2 до корня из числа:
#         если число делится на делитель без остатка:
#             число не простое, перейти к следующему
#     если число простое: добавить в список простых чисел
# Вывести список простых чисел
# 5. Напишите алгоритм превращения предложения, написанного в верхнем регистре,
# в обычный для предложений регистр.
# Ввести: предложение в ВЕРХНЕМ РЕГИСТРЕ
# Первая буква = сделать заглавной первую букву предложения
# Остальные буквы = сделать строчными все остальные буквы
# Вывести результат
# 6. Составьте блок-схему приготовления льда из кипяченой воды с помощью холодильника.
# НАЧАЛО
# │
# ▼
# Взять кипяченую воду
# │
# ▼
# Налить воду в формочку для льда
# │
# ▼
# Поставить формочку в морозильную камеру
# │
# ▼
# Установить температуру ниже 0°C
# │
# ▼
# Ждать 4-6 часов
# │
# ▼
# Достать готовый лед
# │
# ▼
# КОНЕЦ
# 7. Составьте блок-схему для нахождения суммы всех четных чисел меньше ста.
# НАЧАЛО
# │
# ▼
# Сумма = 0
# │
# ▼
# Для числа = 2 до 98 с шагом 2:
# │   Сумма = Сумма + число
# │
# ▼
# Вывести Сумма
# │
# ▼
# КОНЕЦ
# 8. Составьте блок-схему для вычисления квадрата всех нечетных чисел от 1 до 15
# включительно.
# НАЧАЛО
# │
# ▼
# Для числа = 1 до 15 с шагом 2:
# │   Квадрат = число * число
# │   Вывести число, "в квадрате =", Квадрат
# │
# ▼
# КОНЕЦ
# 9. Составьте блок-схему вывода таблицы умножения на 3.
# НАЧАЛО
# │
# ▼
# Для множителя = 1 до 10:
# │   Результат = 3 * множителя
# │   Вывести "3 ×", множителя, "=", Результат
# │
# ▼
# КОНЕЦ
# 10. Составьте блок-схему для расчета сложных процентов (с капитализацией).
# НАЧАЛО
# │
# ▼
# Ввести: начальная сумма, годовая ставка, лет, периодов капитализации в год
# │
# ▼
# Общее количество периодов = лет * периодов капитализации
# Ставка за период = годовая ставка / периодов капитализации / 100
# │
# ▼
# Итоговая сумма = начальная сумма
# │
# ▼
# Для периода = 1 до Общее количество периодов:
# │   Итоговая сумма = Итоговая сумма * (1 + Ставка за период)
# │
# ▼
# Вывести Итоговая сумма
# │
# ▼
# КОНЕЦ

# 1. Что думают ученые о будущем Data Science? Изучите материалы на эту тему
# и поделитесь ими с друзьями.
#     - AI станет более автономным в анализе данных
#     - Возрастет важность этики и объяснимого ИИ
#     - Интеграция с IoT и реальным временем
#     - Автоматизация рутинного анализа
#     - Новые методы работы с небольшими данными
# 2. Составьте список разных ЮЕ для языка Python. Узнайте, чем они похожи и чем
# отличаются.
# **Список IDE/Сходства/Различия:**
#     - VS Code, PyCharm, Jupyter, Spyder, Thonny
#     - Сходства: подсветка синтаксиса, отладка, автодополнение
#     - Различия: сложность, специализация, производительность
# 3. Составьте список всех компилируемых и интерпретируемых языков. Найдите
# ситуации, в которых каждый из них будет полезнее в использовании, чем
# остальные.
# **Компилируемые vs интерпретируемые языки:**
#     - Компилируемые (C++, Go, Rust):
#         - Полезны: системное программирование, игры, высоконагруженные системы
#     - Интерпретируемые (Python, JavaScript, Ruby):
#         - Полезны: веб-разработка, прототипирование, скриптование
#     - Гибридные (Java, C#):
#         - Полезны: кроссплатформенные приложения, enterprise-решения
# 4. Создайте алгоритмы для решения некоторых распространенных задач, с которыми
# вы сталкиваетесь в повседневной жизни. Составьте для них блок-схемы.
# Алгоритм "Приготовление завтрака":
# 1. Проверить наличие продуктов
# 2. Если яйца есть → жарить яичницу
# 3. Если хлеб есть → сделать тосты
# 4. Накрыть на стол
# 5. Как вы думаете, может ли изучение компьютерного программирования помочь
# автоматизировать какие-нибудь повторяющиеся рутинные задачи? Подготовьте
# список таких задач и попробуйте автоматизировать их по мере изучения этой книги.
# ***Автоматизация рутины через программирование:***
#     - Да, может помочь автоматизировать:
#     - Обработка документов
#     - Сбор информации из интернета
#     - Организация файлов
#     - Отправка регулярных отчетов
#     - Проверка почты и уведомлений
# Программирование — это инструмент для создания "цифровых помощников", которые берут на себя повторяющиеся задачи.
