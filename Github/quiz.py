# %%
"""Issue Open Source."""

# GitHub
# 1.1. Что такое GitHub?
# GitHub — это веб-сервис (онлайн-платформа) для хостинга
# и совместной разработки IT-проектов с использованием
# системы контроля версий Git
# 1.2. Как GitHub связан с Git?
# Git — это локальная система контроля версий, а GitHub
# — облачный хостинг для репозиториев Git. Git используется
# для работы с кодом на вашем компьютере, а GitHub служит удалённым
# сервером для хранения и совместной работы над проектами
# 1.3. Чем отличается fork репозитория от его клонирования (clone)?
# Форк создаёт вашу личную копию чужого репозитория на вашем аккаунте
# GitHub, чтобы вы могли предлагать изменения в исходный проект.
# Клонирование же создаёт локальную копию репозитория на вашем
# компьютере для непосредственной работы с кодом
# 1.4. Зачем нужны и как работают pull requests?
# Pull Requests позволяют предложить изменения в чужой репозиторий
# и провести код-ревью перед слиянием. Вы создаёте запрос на слияние
# своей ветки с основной веткой проекта, где можно обсудить и
# доработать код перед его принятием
# 1.5. GitHub использует ваш почтовый адрес для привязки
# ваших Git коммитов к вашей учётной записи?
# Да, GitHub связывает коммиты с вашим аккаунтом по email-адресу,
# указанному в настройках Git. Для этого этот email должен быть
# подтверждён и привязан к вашей учётной записи на GitHub
# 1.6 Какая команда генерирует SSH ключ для Доступа
# по SSH к репозиторию (Рисунок 83)
# ssh-keygen
# 2.9) как открыть запрос слияния, указывающий на другой
# запрос слияния и зачем это нужно?
# При создании PR выберите ветку другого PR как целевую.
# Это нужно для проверки зависимых изменений
# 3) Напишите 8 пунктов, которые нужно сделать,
# чтобы внести вклад в чужой проект
# Найти подходящий issue
# Сделать fork репозитория
# Клонировать свой fork
# Создать новую ветку
# Внести изменения
# Протестировать код
# Создать Pull Request
# Участвовать в обсуждении
# 3.1 Какие практики принято соблюдать при создании
# Pull Request чтобы закрыть автоматический issues?
# Упомянуть issue в описании PR используя ключевые слова:
# fixes #номер или closes #номер
# 3.2 Какие практики принято соблюдать при создании
# commit чтобы закрыть автоматический issues?
# В сообщении коммита указать fixes #номер или closes #номер issue
# 3.2 Как отклонить/закрыть пул реквест?
# (предоставьте скриншот где это в гитхабе)
# Кнопка "Close pull request" внизу страницы PR
# ![Снимок экрана 2025-09-28 в 18.23.31.png]
# (<attachment:Снимок экрана 2025-09-28 в 18.23.31.png>)
# 3.3 Перед отправкой пул реквеста нужно ли создавать ишьюс?
# Не обязательно, но рекомендуется для обсуждения крупных изменений
# 3.4 В какой вкладке можно посмотреть список изменений
# который был в пул реквесте? (Рисунок 92)
# Вкладка "Files changed"
# 3.5 В какой вкладке находится страница обсуждений пул реквеста? (Рисунок 94)
# Вкладка "Conversation"
# Создание запроса на слияние
# 4 Можно ли открыть пул реквест, если вы ничего не вносили в FORK?
# Нет, нужны изменения в коде
# 4.1 Что нужно сделать чтобы открыть пул реквест? (Рисунок 90)
# Нажать "Compare & pull request" между вашей веткой и исходным репозиторием
# 4.2 Что нужно сделать Если ваш Форк устарел?
# Синхронизировать через "Fetch upstream" или через git команды
# 4.3 Что нужно сделать если в пул реквесте имеются конфликты слияния
# (Рисунок 96)
# Разрешить конфликты локально и запушить исправления
# Отрывки кода
# 5 Что нужно сделать Для добавления отрывка кода в
# комментарии к ишьюсу? (Рисунок 104)
# Для однострочного / inline кода — окружи текст
# одиночными обратными кавычками: `код`.
# Для блочного кода — окружи тройными обратными кавычками
# 5.1 На какую клавишу нажать клавишу чтобы выделенный
# текст был включён как цитата в ваш комментарий?(Рисунок 105)
# выдели текст и нажми клавишу R — GitHub автоматически вставит >
# и сделает блок-цитату (работает при просмотре обсуждения).
# Ещё вариант (форматирование): Ctrl+Shift+. (Windows/Linux)
# или Cmd+Shift+. (Mac) — вставить Markdown-форматирование цитаты
# 5.2 Как вставить картинку в ишьюс? (Рисунок 108)
# Просто перетащи изображение в поле комментария (drag & drop)
# или вставь из буфера (paste).
# Можно также нажать на ссылку/кнопку «Attach files by
# dragging & dropping, selecting them, or pasting them»
# и выбрать файл — GitHub
# загрузит картинку и вставит Markdown-ссылку
# Поддержание GitHub репозитория в актуальном состоянии
# 6 Как понять что ваш форк устарел?
# “this branch is X commits behind” или предлагает кнопку Fetch upstream /
# Sync fork — это означает, что в оригинальном (upstream) репозитории
# появились новые коммиты, которых нет в твоём форке.
# Ещё можно зайти в Compare и сравнить ветки форка и upstream —
# увидишь различия
# 6.1 Как обновить форк?
# Открой страницу своего форка на GitHub.
# Нажми Fetch upstream / Sync fork → Fetch and merge (или Sync fork)
# — GitHub подтянет изменения из оригинального репозитория в твой форк
# Добавление участников
# 7 Как добавить участников в ваш репозиторий, чтобы команда могла
# работать над одним репозиторием? (Рисунок 112)
# Зайди в репозиторий → Settings.
# В левой панели найди Access → Collaborators & teams (или Manage access).
# Нажми Add people / Add collaborators, введи GitHub-имя/почту,
# выбери роль (Read/Triage/Write/Maintain/Admin) → Invite.
# Человек получит приглашение и после принятия получит доступ
# Упоминания и уведомления
# 8 Какой символ нужен для упоминания кого-либо? (Рисунок 118)
# @ + username
# 8.1 Где находится Центр уведомлений, напишите ссылку (Рисунок 121)
# https://github.com/notifications
# Особенные файлы
# 9 Что такое и зачем нужен файл README
# README — главный файл с описанием проекта (README.md).
# Рассказывает что проект делает, как его запускать/устанавливать,
# куда смотреть за документацией, кто поддерживает проект
# и т. п. GitHub автоматически показывает README на главной
# странице репозитория
# 9.1 Что такое и зачем нужен файл CONTRIBUTING (Рисунок 122)
# CONTRIBUTING.md — инструктаж для желающих внести вклад: как
# оформлять PR, стиль кода, тесты, процесс ревью и т.д.
# GitHub подсказывает ссылку на CONTRIBUTING при создании PR/issue
# Управление проектом
# 10 Как измененить основную ветку (Рисунок 123)
# Открой репозиторий → Settings.
# Найди секцию Default branch → рядом нажми кнопку
# в виде лестницы или Change default branch → выбери другую ветку → Update
# 10. 1 Как передать проект? какая кнопка? (рисунок 124)
# В Settings → Options спусти вниз до Danger Zone → нажми Transfer
# (или Transfer ownership) и следуй инструкциям
# (нужно указать имя нового владельца и подтвердить)
# 10.2 Что такое файл .gitignore?
# текстовый файл со списком шаблонов/имён файлов,
# которые git должен игнорировать (не добавлять в индекс/коммиты).
# Используется для временных файлов, сборок, конфигураций IDE,
# секретов и т. п. Файл кладут в корень репозитория и коммитят,
# чтобы все участники игнорировали одни и те же файлы
